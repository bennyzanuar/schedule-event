{"version":3,"sources":["storage/index.js","reducers/eventReducers.js","reducers/index.js","actions/index.js","store.js","components/FormEvent.js","components/Calendar.js","App.js","serviceWorker.js","index.js"],"names":["set","data","JSON","stringify","localStorage","setItem","get","getItem","parse","initialState","combineReducers","events","state","arguments","length","undefined","action","type","payload","concat","Object","toConsumableArray","data_event","map","evt","event_id","data_event_remove","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","FormEvent","values","_this$props","this","props","addEvent","editEvent","day","isEdit","formatDay","dateFns","format","assign","id","removeEvent","event_name","event_time","event_invite_email","_this","_this$props2","nanoid","react_default","a","createElement","formik_esm","initialValues","onSubmit","_ref","setSubmitting","setTimeout","submitForm","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","className","placeholder","value","onChange","onBlur","onClick","disabled","onDelete","React","Component","ReactModal","setAppElement","Calendar","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","dragStart","event","event_obj","event_string","dataTransfer","setData","drop","count_event","event_str","getData","newDay","toast","error","position","POSITION","TOP_LEFT","onEditClick","setState","selectedDate","selectedEvent","handleOpenModal","onAddClick","nextMonth","currentMonth","addMonths","prevMonth","subMonths","Date","showModal","bind","assertThisInitialized","onCloseModal","loadEvent","_this$state","lib_default","isOpen","contentLabel","components_FormEvent","days","startDate","startOfWeek","i","push","key","addDays","groupingEvent","_this2","eventCount","color","heightFill","heightFree","itemBg","_loop","style","background","width","height","display","padding","overflow","whiteSpace","textOverflow","fontWeight","draggable","onDragStart","e","react","_this3","_this$state2","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","formattedDate","_loop2","cloneDay","isSameMonth","isSameDay","onDrop","onDragOver","preventDefault","renderBgEvent","renderHeader","renderDays","renderCells","renderModal","connect","dispatch","dataStorage","App","es","components_Calendar","react_toastify_lib","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d988ac1.chunk.js","sourcesContent":["const storage_name = \"events\"\nexport const set = (data) => {\n    data = JSON.stringify(data)\n    data = localStorage.setItem(storage_name, data)\n    return  data\n}\n\nexport const get = () => {\n    let data = localStorage.getItem(storage_name)\n    data = JSON.parse(data)\n    return  data\n}\n\nexport const initalData = () => {\n    let data = []\n    return set(data)\n}","import { LOAD_EVENT, ADD_EVENT, EDIT_EVENT, REMOVE_EVENT } from \"../actions\"\nimport { set } from '../storage'\n\nconst initialState = {\n    data: []\n}\n\nexport default function(state=initialState.data, action){\n    switch(action.type){\n        case LOAD_EVENT:\n            return action.payload\n        case ADD_EVENT:\n            return [action.payload, ...state]\n        case EDIT_EVENT:\n            let data_event = state.map(evt => evt.event_id === action.payload.event_id ? (evt = action.payload) : evt)\n            // save to storage\n            set(data_event)\n            return data_event\n        case REMOVE_EVENT:\n            let data_event_remove = state.filter(evt => evt.event_id !== action.payload)\n            // save to storage\n            set(data_event_remove)\n            return data_event_remove\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux'\nimport eventReducers from './eventReducers'\nexport default combineReducers({\n    events: eventReducers\n})","import { set, get, initalData } from '../storage'\n\nexport const ADD_EVENT = \"ADD_EVENT\"\nexport const EDIT_EVENT = \"EDIT_EVENT\"\nexport const LOAD_EVENT = \"LOAD_EVENT\"\nexport const REMOVE_EVENT = \"REMOVE_EVENT\"\n\nexport const loadEvent = () => dispatch => {\n    if (get() == null) {\n        initalData()\n    }\n    let data = get()\n    dispatch({\n        type: LOAD_EVENT,\n        payload: data\n    })\n}\n\nexport const addEvent = (data) => dispatch => {\n    let dataStorage = get()\n    dataStorage.push(data)\n    set(dataStorage)\n    \n    dispatch({\n        type: ADD_EVENT,\n        payload: data\n    })\n}\n\nexport const editEvent = (data) => dispatch => {\n    dispatch({\n        type: EDIT_EVENT,\n        payload: data\n    })\n}\n\nexport const removeEvent = (id) => dispatch => {\n    dispatch({\n        type: REMOVE_EVENT,\n        payload: id\n    })\n}","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, initialState,\n    compose(applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && \n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()\n    )\n);\n\nexport default store","import React from \"react\"\nimport dateFns from \"date-fns\"\nimport nanoid from 'nanoid'\nimport { Formik } from 'formik';\n\nclass FormEvent extends React.Component {\n    \n    submitForm(values){\n        const { addEvent, editEvent, day, isEdit } = this.props\n        let formatDay = dateFns.format(\n            day,\n            'DD-MM-YYYY'\n        )\n        let data = Object.assign(values, { day : formatDay })\n        if (isEdit) {\n            editEvent(data)\n        }else{\n            addEvent(data)\n        }\n    }\n    onDelete(id){\n        const { removeEvent } = this.props\n        removeEvent(id)\n    }\n    \n    render(){\n        const { events, isEdit } = this.props\n\n        var event_name, event_time, event_invite_email, event_id = ''\n        event_id = nanoid()\n        \n        if (typeof events.event_name !== 'undefined') {\n            event_name = events.event_name\n            event_time = events.event_time\n            event_invite_email = events.event_invite_email\n            event_id = events.event_id\n        }\n        return(\n            <Formik\n                initialValues={\n                    { \n                        event_id: event_id || '',\n                        event_name: event_name || '',\n                        event_time: event_time || '',\n                        event_invite_email: event_invite_email || ''\n                    }\n                }\n                onSubmit={(values, { setSubmitting }) => {\n                    setTimeout(() => {\n                        this.submitForm(values)\n                        setSubmitting(false);\n                    }, 500);\n                }}\n            >\n                {props => {\n                    const {\n                        values,\n                        dirty,\n                        isSubmitting,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        handleReset,\n                } = props;\n                return (\n                    <form onSubmit={handleSubmit}>\n                        <div>\n                            <label className=\"desc\">Name</label>\n                            <div>\n                                <input \n                                    id=\"event_name\"\n                                    className=\"field text fn form-control\"\n                                    placeholder=\"Name\"\n                                    type=\"text\"\n                                    value={values.event_name}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                            </div>\n                        </div>\n                        <div>\n                            <label className=\"desc\">Time</label>\n                            <div>\n                                <input \n                                    id=\"event_time\"\n                                    className=\"field text fn form-control\"\n                                    placeholder=\"Time\"\n                                    type=\"text\"\n                                    value={values.event_time}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                            </div>\n                        </div>\n                        <div>\n                            <label className=\"desc\">Email</label>\n                            <div>\n                                <input \n                                    id=\"event_invite_email\"\n                                    className=\"field text fn form-control\"\n                                    placeholder=\"Email\"\n                                    type=\"text\"\n                                    value={values.event_invite_email}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                />\n                            </div>\n                        </div>\n                        <button\n                            type=\"button\"\n                            className=\"outline btn btn-primary\"\n                            onClick={handleReset}\n                            disabled={!dirty || isSubmitting}\n                            >\n                            Reset\n                        </button>\n                        &nbsp;\n                        <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>\n                            Submit\n                        </button>\n                        &nbsp;\n                        <span>\n                            {\n                                isEdit &&\n                                <button type=\"button\" \n                                    onClick={() => this.onDelete(values.event_id)}\n                                    className=\"btn btn-delete\">\n                                    Delete\n                                </button>\n                            }\n                        </span>\n                    </form>\n                    );\n                }}\n            </Formik>\n        )\n    }\n}\n\nexport default FormEvent;","import React, { Fragment } from \"react\"\nimport dateFns from \"date-fns\"\nimport ReactModal from 'react-modal'\nimport FormEvent from './FormEvent'\nimport { loadEvent, addEvent, editEvent, removeEvent } from \"../actions\"\nimport { connect } from 'react-redux'\nimport nanoid from 'nanoid'\nimport { toast } from 'react-toastify'\n\nReactModal.setAppElement('#root')\n\nclass Calendar extends React.Component {\n    constructor () {\n        super();\n        this.state = {\n            currentMonth: new Date(),\n            selectedDate: new Date(),\n            showModal: false,\n            selectedEvent: ''\n        };\n        this.handleOpenModal = this.handleOpenModal.bind(this);\n        this.onCloseModal = this.onCloseModal.bind(this);\n    }\n    \n    componentDidMount(){\n        this.props.loadEvent()\n    }\n    \n    handleOpenModal () {\n        this.setState({ showModal: true });\n    }\n\n    onCloseModal () {\n        this.setState({ showModal: false });\n    }\n    \n    renderModal () {\n        const { addEvent, editEvent, removeEvent } = this.props\n        const { selectedDate, selectedEvent } = this.state\n\n        let isEdit = typeof selectedEvent.event_name !== 'undefined' ? true : false\n        \n        return (\n            <div>\n                <ReactModal \n                    isOpen={this.state.showModal}\n                    contentLabel=\"Minimal Modal Example\"\n                    >\n                        <button className=\"btn button-close\" onClick={this.onCloseModal}>X</button>\n                        <FormEvent addEvent={addEvent} editEvent={editEvent} removeEvent={removeEvent} day={selectedDate} events={selectedEvent} isEdit={isEdit} />\n                </ReactModal>\n            </div>\n        );\n    }\n\n    renderHeader() {\n        const dateFormat = \"MMMM YYYY\";\n\n        return (\n            <div className=\"header row flex-middle\">\n                <div className=\"col col-start\">\n                    <div className=\"icon\" onClick={this.prevMonth}>\n                        chevron_left\n                    </div>\n                </div>\n                <div className=\"col col-center\">\n                    <span>{dateFns.format(this.state.currentMonth, dateFormat)}</span>\n                </div>\n                <div className=\"col col-end\" onClick={this.nextMonth}>\n                    <div className=\"icon\">chevron_right</div>\n                </div>\n            </div>\n        );\n    }\n\n    renderDays() {\n        const dateFormat = \"dddd\";\n        const days = [];\n\n        let startDate = dateFns.startOfWeek(this.state.currentMonth);\n\n        for (let i = 0; i < 7; i++) {\n            days.push(\n                <div className=\"col col-center\" key={i}>\n                    {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\n                </div>\n            );\n        }\n\n        return <div className=\"days row\">{days}</div>;\n    }\n    \n    dragStart = (event, event_obj) => {\n        let event_string = JSON.stringify(event_obj);\n        event.dataTransfer.setData(\"event_str\", event_string)\n    }\n    \n    drop = (event, day, count_event) => {\n        const { editEvent } = this.props\n        let event_str = event.dataTransfer.getData(\"event_str\")\n        let event_obj = JSON.parse(event_str);\n        let newDay = dateFns.format(\n            day,\n            'DD-MM-YYYY'\n        )\n        if (count_event < 3) {\n            event_obj.day = newDay\n            editEvent(event_obj)\n        }else if (newDay === event_obj.day) {\n        }else {\n            toast.error(\"Sorry, you can't add event to this date\", {\n                position: toast.POSITION.TOP_LEFT\n            })\n        }\n    }\n    \n    renderBgEvent(day, groupingEvent){\n        let eventCount = groupingEvent.length\n\n        let color = [\"#f3d250\", \"#90ccf4\", \"#5da2d5\"]\n        let heightFill = 0\n        let heightFree = 100\n        if (eventCount === 1 ) {\n            heightFill = 50\n            heightFree = 50\n        }else if (eventCount < 3 && eventCount > 1) {\n            heightFill = 25\n            heightFree = 50\n        }else{\n            heightFree = 100\n            heightFill = 100/eventCount\n        }\n        \n        const itemBg = []\n        // is fill event\n        for (let i = 0; i < eventCount; i++) {\n            let style = {\n                background: color[i],\n                width: \"100%\", \n                height: heightFill+\"%\", \n                display: \"block\",\n                padding: \"3px\",\n                overflow: \"hidden\",\n                whiteSpace: \"nowrap\",\n                textOverflow: \"ellipsis\",\n                fontWeight: \"500\"\n            }\n            itemBg.push(\n                <div \n                    key={groupingEvent[i].event_id} \n                    style={style}\n                    onClick={() => this.onEditClick(day, groupingEvent[i])}\n                    draggable=\"true\"\n                    onDragStart={(e) => this.dragStart(e, groupingEvent[i])}\n                >\n                { groupingEvent[i].event_name  }\n                </div>\n            )\n        }\n                \n        if (eventCount < 3) {\n            let style = {\n                width: \"100%\", \n                height: heightFree+\"%\", \n                display: \"block\",\n                overflow: \"hidden\",\n                whiteSpace: \"nowrap\",\n                textOverflow: \"ellipsis\",\n                fontWeight: \"500\"\n            }\n            \n            itemBg.push(\n                <div \n                    key={nanoid()} \n                    style={style}\n                    onClick={() => this.onAddClick(day)}\n                >\n                </div>\n            )\n        }\n        \n        return (\n            <Fragment>\n                {itemBg}\n            </Fragment>\n        )\n    }\n\n    renderCells() {\n        const { events } = this.props\n        const { currentMonth, selectedDate } = this.state;\n\n        const monthStart = dateFns.startOfMonth(currentMonth);\n        const monthEnd = dateFns.endOfMonth(monthStart);\n        const startDate = dateFns.startOfWeek(monthStart);\n        const endDate = dateFns.endOfWeek(monthEnd);\n\n        const dateFormat = \"D\";\n        const rows = [];\n\n        let days = [];\n        let day = startDate;\n        let formattedDate = \"\";\n\n        while (day <= endDate) {\n            for (let i = 0; i < 7; i++) {\n                \n                let newDay = dateFns.format(day, \"DD-MM-YYYY\")\n                let groupingEvent = []\n                \n                if (events.length > 0) {\n                    events.map(evt =>{\n                        if (newDay === evt.day) {\n                            groupingEvent.push(evt)\n                        }\n                    })\n                }\n                \n                let count_event = groupingEvent.length\n                formattedDate = dateFns.format(day, dateFormat)\n                const cloneDay = day;\n                days.push(\n                    <div\n                        className={`col cell ${\n                            !dateFns.isSameMonth(day, monthStart)\n                            ? \"disabled\"\n                            : dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\"\n                        }`}\n                            key={day}\n                            onDrop={(e) => this.drop(e, dateFns.parse(cloneDay), count_event)}\n                            onDragOver={(e) => e.preventDefault()}\n                        >\n                        <span className=\"number\">{formattedDate}</span>\n                        <span className=\"bgEvent\">{this.renderBgEvent(dateFns.parse(cloneDay), groupingEvent)}</span>\n                    </div>\n                );\n                day = dateFns.addDays(day, 1);\n            }\n            rows.push(\n                <div className=\"row\" key={day}>\n                    {days}\n                </div>\n            );\n            days = [];\n        }\n        return <div className=\"body\">{rows}</div>;\n    }\n    \n    onEditClick = (day, events) => {\n        this.setState({\n            selectedDate: day,\n            selectedEvent: events\n        });\n        this.handleOpenModal();\n    }\n\n    onAddClick = (day, events) => {\n        this.setState({\n            selectedDate: day,\n            selectedEvent: ''\n        });\n        this.handleOpenModal();\n    };\n\n    nextMonth = () => {\n        this.setState({\n            currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\n        });\n    };\n\n    prevMonth = () => {\n        this.setState({\n            currentMonth: dateFns.subMonths(this.state.currentMonth, 1)\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"calendar\">\n                {this.renderHeader()}\n                {this.renderDays()}\n                {this.renderCells()}\n                {this.renderModal()}\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state){\n    return { \n        events: state.events\n    }\n}\n\nexport default connect(mapStateToProps, {loadEvent, addEvent, editEvent, removeEvent})(Calendar);","import React from \"react\";\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport Calendar from \"./components/Calendar\";\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport \"./App.css\";\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <div className=\"App\">\n                    <main>\n                        <Calendar />\n                    </main>\n                    <ToastContainer />\n                </div>\n            </Provider>\n        )\n    }\n}\n\nexport default App;\n//\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}